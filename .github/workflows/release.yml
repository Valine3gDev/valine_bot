name: Release

permissions:
  contents: write
  packages: write

on:
  release:
    types:
      - published

jobs:
  build:
    name: Release binary
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            glibc: 2.17
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            glibc: 2.17

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Rustのpackage名を取得して環境変数に入れておく。(後のステップで使用)
      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      # zigをインストール
      - name: Install Zig
        uses: mlugg/setup-zig@v2

      # rustをインストール
      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          targets: ${{ matrix.target }}
          bins: cargo-zigbuild

      # moldをインストール
      - uses: rui314/setup-mold@v1

      # ビルド
      - name: Build with glibc version
        if: matrix.glibc != -1
        run: |
          cargo zigbuild --release --target ${{ matrix.target }}.${{ matrix.glibc }}

      - name: Build without glibc version
        if: matrix.glibc == -1
        run: |
          cargo build --release --target ${{ matrix.target }}

      # ビルド済みバイナリをコピーしてリネーム
      - name: Copy and rename artifacts
        shell: bash
        run: |
          mv target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} ./target/release/
          cp target/release/${{ env.PROJECT_NAME }}{,-${{ github.ref_name }}-${{ matrix.target }}}
          cp target/release/${{ env.PROJECT_NAME }} target/release/${{ matrix.target }}

      - uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: target/release/${{ matrix.target }}

      # ビルド済みバイナリをReleasesに配置
      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/release/${{ env.PROJECT_NAME }}-${{ github.ref_name }}-${{ matrix.target }}

  docker:
    runs-on: ubuntu-latest
    needs: build
    name: Build and push Docker image
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,enable=false
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
